#!/usr/bin/env python3

# for real data, 60 seconds + name
TIME_OFFSET = -4

# for test data, a = 1 second, b = 2 seconds, etc
# TIME_OFFSET = -64


class WorkerState:
    def __init__(self):
        self.step = None
        self.seconds = 0

    def start_step(self, step):
        self.step = step
        self.seconds = 0

    def tick(self):
        if self.step:
            self.seconds += 1
            if self.seconds == self.step.time:
                return self.step.name

    def available(self):
        return self.step is None or self.step.time == self.seconds

    def done(self):
        return self.step and self.step.time == self.seconds


class Step:
    def __init__(self, name):
        self.name = name
        self.time = ord(name) + TIME_OFFSET
        self.deps = []

    def add_dep(self, name):
        self.deps.append(name)

    def __repr__(self):
        return "<Step {}, deps: {}>".format(self.name, self.deps)


def parse_steps(lines):
    steps = {}
    for ln in lines:
        tok = ln.split(" ")
        dep = tok[1]
        name = tok[7]

        if name not in steps:
            steps[name] = Step(name)
        if dep not in steps:
            steps[dep] = Step(dep)

        step = steps[name]
        if dep not in step.deps:
            step.add_dep(dep)
    return sorted(steps.values(), key=lambda s: s.name)


def choose_next_step(seq, steps):
    for st in steps:
        if st.name not in seq and all(map(lambda d: d in seq, st.deps)):
            return st.name


def resolve_dependencies(steps):
    seq = []
    while len(seq) != len(steps):
        next_step = choose_next_step(seq, steps)
        if next_step:
            seq.append(next_step)
        else:
            break
    return seq


def part_1(steps):
    seq = resolve_dependencies(steps)
    print("".join(seq))


def select_idle_workers(workers):
    return list(filter(lambda w: w.available(), workers))


def find(fn, lst):
    for item in lst:
        if fn(item):
            return item


def select_next_available_step(done, steps):
    def dep_done(d): return d in done
    for (i, st) in enumerate(steps):
        if all(map(dep_done, st.deps)) and st.name not in done:
            steps.pop(i)
            return st


def count_time_to_complete(steps, worker_count):
    done = []
    seconds = 0
    workers = [WorkerState() for _ in range(worker_count)]
    total_steps = len(steps)

    while True:
        for wk in workers:
            if wk.done():
                done.append(wk.step.name)
            if wk.available():
                next_step = select_next_available_step(done, steps)
                if next_step:
                    wk.start_step(next_step)

            wk.tick()

        preview_progress(seconds, workers, done)

        if len(done) == total_steps:
            break
        else:
            seconds += 1
    return seconds


def part_2(steps):
    steps = sorted(steps, key=lambda s: s.name)
    seconds = count_time_to_complete(steps, 5)
    print("The sequence was built in {} seconds".format(seconds))


def main():
    with open("./day7.txt") as lines:
        steps = parse_steps(list(lines))
        part_1(steps)
        part_2(steps)


def preview_progress(seconds, workers, done):
    [w1, w2, w3, w4, w5] = workers
    [s1, s2, s3, s4, s5] = w1.step, w2.step, w3.step, w4.step, w5.step
    n1 = "."
    n2 = "."
    n3 = "."
    n4 = "."
    n5 = "."
    if s1 and w1.seconds < s1.time:
        n1 = s1.name
    if s2 and w2.seconds < s2.time:
        n2 = s2.name
    if s3 and w3.seconds < s3.time:
        n2 = s3.name
    if s4 and w4.seconds < s4.time:
        n2 = s4.name
    if s5 and w5.seconds < s5.time:
        n2 = s5.name
    dn = "".join(done)
    print(" {}         {}         {}         {}         {}         {}      {}".format(seconds, n1, n2, n3, n4, n5, dn))


if __name__ == "__main__":
    main()
